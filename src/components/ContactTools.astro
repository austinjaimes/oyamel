<style>
    section {
      min-height: 600px;
      padding: 3rem 1rem;
    }
  
    .card {
      height: 300px;
      max-width: 250px;
      width: 100%;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      background-color: var(--azul-primario);
      cursor: pointer;
    }
    .card:hover {
  transform: scale(1.05);
  transition: transform 0.3s ease;
  background-color: var(--verde-apagado);
}
    .icon {
      width: 32px;
      height: 32px;
    }
  </style>
  
  <section class="flex flex-col items-center fade-in opacity-0 translate-y-6 transition-all duration-700 ease-out">
    <h2 class="text-3xl md:text-4xl text-center mb-6">Contacto para admisión de nuevo ingreso</h2>
    <p class="max-w-3xl text-center mb-10">
      Si necesitas más información sobre becas, financiamientos, campus o tu proceso de inscripción, puedes contactar a un asesor para que resuelvas todas tus dudas y te guíe en tu camino académico.
    </p>
  
    <div class="w-full flex flex-wrap justify-center gap-8 max-w-6xl">
      <div class="card flex flex-col items-center justify-center gap-y-4">
        <img src="https://cdn-icons-png.flaticon.com/512/94/94915.png" alt="Icono" class="icon">
        <h3 class="text-lg">Solicita información</h3>
        <p class="text-center">Disponible las 24 horas.</p>
      </div>
      <div class="card flex flex-col items-center justify-center gap-y-4">
        <img src="https://cdn-icons-png.freepik.com/256/733/733641.png?ga=GA1.1.975423546.1745596955&semt=ais_hybrid" alt="Icono" class="icon">
        <h3 class="text-lg">Solicita información</h3>
        <p class="text-center">Disponible las 24 horas.</p>
      </div>
      <div class="card flex flex-col items-center justify-center gap-y-4">
        <img src="https://cdn-icons-png.freepik.com/256/7699/7699178.png?ga=GA1.1.975423546.1745596955&semt=ais_hybrid" alt="Icono" class="icon">
        <h3 class="text-lg">Solicita información</h3>
        <p class="text-center">Disponible las 24 horas.</p>
      </div>
      <div class="card flex flex-col items-center justify-center gap-y-4">
        <img src="https://cdn-icons-png.freepik.com/256/12586/12586314.png?ga=GA1.1.975423546.1745596955&semt=ais_hybrid" alt="Icono" class="icon">
        <h3 class="text-lg">Solicita información</h3>
        <p class="text-center">Disponible las 24 horas.</p>
      </div>
    </div>
  </section>
  
  <style is:global>
    .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .fade-in {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.9s ease-out,
      transform 0.9s ease-out;
  }

  .fade-in.show {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const elements = document.querySelectorAll(".fade-in");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("show");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.2 },
    );

    elements.forEach((el) => observer.observe(el));
  });

document.addEventListener("DOMContentLoaded", () => {
    const stats = document.querySelectorAll(".fade-in");

    const animateCount = (el) => {
      const target = +el.dataset.target;
      let current = 0;
      const speed = target < 100 ? 50 : 10;

      const update = () => {
        const increment = Math.ceil(target / speed);
        current += increment;
        console.log(current, target);
        if (current >= target) {
          if (target == 100) {
            el.textContent = `${target}%`;
          } else {
            el.textContent = `${target}+`;
          }
        } else {
          el.textContent = `${current}+`;
          requestAnimationFrame(update);
        }
      };

      update();
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.remove("opacity-0", "translate-y-6");
          entry.target.classList.add("opacity-100", "translate-y-0");

          const numberEl = entry.target.querySelector(".stat");
          if (numberEl && !numberEl.dataset.animated) {
            animateCount(numberEl);
            numberEl.dataset.animated = true;
          }

          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.2,
    });

    stats.forEach((stat) => observer.observe(stat));
  });
</script>